import numpy as np
import math
import cv2


class visitlist:
    """
    visitlist类，用于记录访问列表
    unvisitedlist记录未访问过的点
    visitedlist记录已访问过的点
    unvisited num记录访问过的点数量
    """
    def __init__(self, count=0):
        self.unvisitedlist = [i for i in range(count)]
        self.visitedlist = list()
        self.unvisitednum = count

    def visit(self, pointId):
        self.visitedlist.append(pointId)
        self.unvisitedlist.remove(pointId)
        self.unvisitednum -= 1


def dist(a, b):
    """
    @brief      计算a,b两个元组的距离，我想加重X方向的权重
    @param      a，点的坐标(y, x)
    @param      b
    @return     距离
    """
    y0, x0, y1, x1 = a[0], a[1], b[0], b[1]
    return math.sqrt(1.5 * np.power((x0 - x1), 2) + 0.5 * np.power((y0 - y1), 2))


def direction(a, b):
    """
    返回的b相对于a的方向，单位弧度
    :param a: a是当前点
    :param b: b是下一个点
    :param direct_now: 单位弧度
    :return:
    """
    y0, x0, y1, x1 = a[0], a[1], b[0], b[1]
    distance = dist(a, b)
    direction = math.asin((x1 - x0) / (distance + 1e-8))

    return direction


def cluster(dataset, eps, minPts):
    """"""
    nPoints = dataset.shape[0]
    vPoints = visitlist(count=nPoints)
    # 初始化簇标记k，标记列表C
    k = -1
    C = [-1 for i in range(nPoints)]
    #假设至少有10个点才能形成一条线
    while(vPoints.unvisitednum >= 10):
        # 每一次查找的初始化，假设车道线走向竖直向上
        # 我们总是从图像的下方开始找
        p_id = vPoints.unvisitedlist[0]
        vPoints.visit(p_id)
        # 从当前点，向前查找，还要记录方向信息
        N = []
        for i in range(nPoints):
            point_now = dataset[p_id]
            point_next = dataset[i]
            distance = dist(point_now, point_next)
            # 初始是两个约束，要在图像更上方，要在距离范围内
            # 要在角度范围内这个约束没有使用
            y_flag,  distance_flag= False, False
            if point_next[0] < point_now[0]:
                y_flag = True
            if distance < eps:
                distance_flag = True
            if y_flag and distance_flag:
                N.append(i)
        # 前进方向的点数达到阈值，才会开始搜索
        if len(N) >= minPts:
            k += 1
            C[p_id] = k
            direct_start_id = p_id
            # 确定有一个新簇，接下来确定哪些点属于这个簇
            for p1_id in N:
                if p1_id in vPoints.unvisitedlist:
                    vPoints.visit(p1_id)
                    direct_end_id = p1_id
                    # 现在的走向，定义为p1_id相对于上一个点的方向
                    direction_now = direction(dataset[direct_start_id], dataset[direct_end_id])
                    # 此时就有了方向的约束
                    M = []
                    for i in range(nPoints):
                        point_now = dataset[p1_id]
                        point_next = dataset[i]
                        distance = dist(point_now, point_next)
                        # 接下来的方向，定义为i相对于p1_id的方向
                        direction_next = direction(dataset[p1_id], dataset[i])
                        # 三个约束，要在图像更上方，要在距离范围内，要在角度范围内
                        y_flag, distance_flag, direction_flag = False, False, False
                        if point_next[0] < point_now[0]:
                            y_flag = True
                        if distance < eps:
                            distance_flag = True
                        if -0.524 < direction_next - direction_now < 0.524:
                            direction_flag = True
                        if y_flag and distance_flag and direction_flag:
                            M.append(i)
                    if len(M) >= minPts:
                        for i in M:
                            if i not in N:
                                 N.append(i)
                    if C[p1_id] == -1:
                        C[p1_id] = k
                        direct_start_id = p1_id

        else:
            C[p_id] = -1
    return C


if __name__ == '__main__':
    # 100
    # centers = np.array([[3, 443], [11, 421], [18, 379], [18, 452], [26, 368], [26, 490], [26, 433], [33, 476], [33, 393], [43, 385], [43, 470], [51, 368], [51, 465], [59, 353], [59, 459], [67, 348], [67, 455], [75, 345], [75, 450], [83, 338], [83, 446], [91, 334], [91, 444], [99, 329], [99, 441], [107, 325], [107, 440], [115, 323], [115, 439], [123, 318], [123, 438], [131, 314], [131, 436], [139, 312], [139, 435], [147, 308], [147, 433], [155, 305], [155, 432], [163, 301], [163, 430], [171, 297], [171, 430], [179, 294], [179, 429], [187, 290], [187, 428], [195, 288], [195, 428], [203, 285], [203, 427], [211, 281], [211, 427], [219, 277], [219, 421], [227, 273], [227, 412], [243, 263]])
    # 200
    # centers = np.array([[3, 378], [3, 444], [11, 359], [11, 440], [19, 355], [19, 435], [26, 361], [26, 415], [26, 295], [34, 380], [34, 401], [34, 292], [43, 288], [43, 375], [51, 368], [51, 302], [59, 365], [59, 290], [67, 322], [67, 375], [67, 255], [75, 228], [75, 321], [75, 372], [83, 347], [83, 348], [83, 362], [83, 246], [83, 225], [90, 239], [90, 345], [99, 233], [99, 342], [107, 230], [107, 339], [115, 229], [115, 337], [123, 221], [123, 337], [131, 219], [131, 337], [131, 506], [139, 219], [139, 340], [139, 503], [147, 219], [147, 344], [147, 495], [155, 218], [155, 346], [155, 488], [163, 218], [163, 347], [171, 218], [171, 349], [179, 218], [179, 352], [187, 218], [187, 355], [195, 219], [195, 357], [203, 219], [203, 361], [211, 219], [211, 363], [219, 219], [219, 366], [227, 218], [227, 369], [243, 219], [243, 378]])
    # 300
    # centers = np.array([[19, 502], [26, 410], [26, 496], [34, 402], [34, 488], [43, 396], [43, 480], [51, 390], [51, 470], [59, 384], [59, 460], [67, 376], [67, 452], [76, 364], [76, 442], [83, 338], [83, 426], [91, 334], [91, 418], [99, 329], [99, 411], [108, 314], [108, 402], [108, 505], [115, 302], [115, 393], [115, 496], [122, 278], [122, 379], [122, 488], [131, 267], [131, 370], [131, 478], [139, 266], [139, 364], [139, 470], [147, 257], [147, 352], [147, 461], [155, 231], [155, 340], [155, 453], [163, 332], [163, 445], [171, 316], [171, 437], [179, 306], [179, 428], [187, 297], [187, 419], [195, 288], [195, 411], [203, 280], [203, 404], [211, 270], [211, 404], [219, 261], [219, 403], [227, 254], [227, 403], [241, 248], [241, 396]])
    # 400
    centers = np.array([[19, 238], [27, 166], [27, 242], [35, 169], [35, 243], [43, 246], [51, 170], [51, 251], [59, 171], [59, 253], [67, 173], [67, 256], [76, 174], [76, 261], [76, 100], [83, 100], [83, 175], [83, 264], [91, 103], [91, 176], [91, 267], [99, 105], [99, 178], [99, 271], [107, 107], [107, 179], [107, 274], [115, 106], [115, 180], [115, 277], [123, 97], [123, 181], [123, 281], [131, 98], [131, 183], [131, 285], [139, 101], [139, 185], [139, 288], [147, 97], [147, 186], [147, 294], [155, 97], [155, 188], [155, 297], [163, 189], [163, 300], [171, 190], [171, 305], [179, 191], [179, 307], [187, 192], [187, 312], [195, 191], [195, 316], [203, 192], [203, 320], [211, 192], [211, 323], [219, 192], [219, 327], [227, 193], [227, 331], [243, 196], [243, 343]])
    # 500
    # centers = np.array([[43, 505], [51, 496], [59, 489], [67, 481], [76, 391], [76, 472], [83, 372], [83, 460], [91, 365], [91, 451], [99, 361], [99, 442], [107, 354], [107, 433], [115, 344], [115, 426], [122, 325], [122, 418], [131, 316], [131, 407], [139, 310], [139, 401], [147, 296], [147, 395], [155, 278], [155, 388], [163, 273], [163, 381], [171, 263], [171, 375], [179, 254], [179, 367], [187, 249], [187, 361], [195, 239], [195, 359], [203, 235], [203, 360], [211, 231], [211, 363], [219, 229], [219, 365], [227, 227], [227, 369], [243, 226], [243, 379]])
    # 700
    # centers = np.array([[3, 77], [3, 173], [3, 286], [11, 78], [11, 175], [11, 290], [19, 79], [19, 177], [19, 294], [26, 73], [26, 178], [26, 301], [35, 73], [35, 180], [35, 303], [43, 75], [43, 180], [43, 303], [51, 77], [51, 183], [51, 307], [59, 79], [59, 183], [59, 308], [67, 82], [67, 185], [67, 311], [76, 80], [76, 187], [76, 320], [83, 75], [83, 189], [83, 321], [91, 77], [91, 192], [91, 324], [99, 80], [99, 194], [99, 327], [107, 83], [107, 195], [107, 329], [115, 83], [115, 197], [115, 335], [123, 78], [123, 199], [123, 337], [131, 81], [131, 200], [131, 340], [139, 88], [139, 202], [139, 342], [147, 92], [147, 203], [147, 349], [155, 204], [155, 351], [163, 206], [163, 354], [171, 207], [171, 358], [179, 208], [179, 360], [187, 210], [187, 365], [195, 213], [195, 369], [203, 214], [203, 373], [211, 216], [211, 376], [219, 217], [219, 381], [227, 219], [227, 386], [243, 225], [243, 389]])
    # 800
    # centers = np.array([[3, 131], [3, 237], [3, 370], [11, 133], [11, 237], [11, 368], [19, 136], [19, 236], [19, 368], [26, 105], [26, 235], [26, 367], [35, 106], [35, 234], [35, 367], [43, 108], [43, 233], [43, 366], [51, 110], [51, 232], [51, 365], [59, 113], [59, 230], [59, 364], [67, 116], [67, 229], [67, 364], [76, 112], [76, 229], [76, 365], [83, 96], [83, 226], [83, 364], [91, 99], [91, 225], [91, 364], [99, 101], [99, 224], [99, 364], [107, 102], [107, 223], [107, 364], [115, 96], [115, 223], [115, 364], [123, 82], [123, 221], [123, 363], [131, 85], [131, 219], [131, 363], [139, 89], [139, 218], [139, 363], [147, 91], [147, 217], [147, 363], [155, 215], [155, 362], [163, 214], [163, 363], [171, 211], [171, 362], [179, 210], [179, 362], [187, 209], [187, 361], [195, 208], [195, 362], [203, 207], [203, 362], [211, 207], [211, 362], [219, 206], [219, 361], [227, 205], [227, 361], [243, 204], [243, 360]])
    centers = centers[::-1]
    image = np.zeros([256, 512, 3], dtype=np.int8)
    for center in centers:
        lane_color = [255, 255, 255]
        cv2.circle(image, (center[1], center[0]), 4, lane_color, -1)
    cv2.imshow('src', image)
    cv2.waitKey(10)

    color_map = [np.array([255, 0, 0]),
                 np.array([0, 255, 0]),
                 np.array([0, 0, 255]),
                 np.array([125, 125, 0]),
                 np.array([0, 125, 125]),
                 np.array([125, 0, 125]),
                 np.array([50, 100, 50]),
                 np.array([100, 50, 100])]
    labels_of_centers = cluster(centers, 100, 3)
    for index, label in enumerate(labels_of_centers):
        if label == -1:
            continue
        lane_color = color_map[label].tolist()
        center = centers[index]
        cv2.circle(image, (center[1], center[0]), 4, lane_color, -1)
    cv2.imshow('src1', image)
    cv2.waitKey()